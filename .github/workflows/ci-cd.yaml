name: CI/CD Pipeline - Order

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set permissions for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Send Discord Notification - Build Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ Microsserviço PEDIDO 🍔🥤🍟🍦: Build concluído com sucesso!🛠️"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification - Build Failure
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ Microsserviço PEDIDO 🍔🥤🍟🍦: Build falhou 🚫! Verifique os logs para mais detalhes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set permissions for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Unit Tests
        run: ./gradlew test jacocoTestReport

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/

      - name: Check Quality Gate
        run: ./gradlew check
        continue-on-error: true

      - name: Run SonarQube Analysis
        run: ./gradlew sonar -Dsonar.projectKey=fiap-g30_pedido -Dsonar.organization=fiap-g30 -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Send Discord Notification - Test Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ Microsserviço PEDIDO 🍔🥤🍟🍦: Testes concluídos com sucesso!📒✏️"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification - Test Failure
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ Microsserviço PEDIDO 🍔🥤🍟🍦: Testes falharam! Verifique os logs para mais detalhes. 🚫"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
        - name: Check out code
          uses: actions/checkout@v4

        - name: Build Docker image
          run: docker build -t gabiponcet/lanchonete-pedido:latest .

        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            ecr: auto
            logout: true
            save-state: false

        - name: Scan Docker image for vulnerabilities
          run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL gabiponcet/lanchonete-pedido:latest

        - name: Push Docker image
          run: docker push gabiponcet/lanchonete-pedido:latest

        - name: Send Discord Success Notification - Deploy
          if: success()
          run: |
            curl -X POST \
              -H 'Content-type: application/json' \
              --data '{"content":"✅ Microsserviço PEDIDO 🍔🥤🍟🍦: Deploy concluído com sucesso!🚀"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

        - name: Send Discord Failure Notification - Deploy
          if: failure()
          run: |
            curl -X POST \
              -H 'Content-type: application/json' \
              --data '{"content":"⚠️ Microsserviço PEDIDO 🍔🥤🍟🍦: Deploy falhou! Verifique os logs para mais detalhes.🚫"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}