name: Provision Infrastructure - PEDIDO

on:
  workflow_run:
    workflows: ["CI/CD Pipeline - Order"]
    types:
      - completed

jobs:
  terraform:
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install LocalStack CLI
        run: pip install localstack

      - name: Start LocalStack with Docker
        run: |
          export LAMBDA_EXECUTOR=docker
          localstack start -d
        env:
          LAMBDA_EXECUTOR: docker

      - name: Wait for LocalStack
        run: |
          for i in {1..30}; do
            nc -zv localhost 4566 && break
            echo "Waiting for LocalStack to be ready..."
            sleep 10
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: |
            ~/.terraform.d
            ~/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/lockfile') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt -recursive
        working-directory: ./terraform

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Manual Approval
        uses: actions/github-script@v3
        if: github.event_name == 'workflow_dispatch'
        with:
          script: |
            const { GITHUB_TOKEN } = process.env;
            const octokit = require('@octokit/rest')({ auth: GITHUB_TOKEN });
            const { data: pull } = await octokit.pulls.createReviewRequest({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: ['reviewer-username'],
            })

      - name: Apply Terraform Plan
        if: success()
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Rollback Deployment
        if: failure()
        run: terraform destroy -auto-approve
        working-directory: ./terraform

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ PEDIDO 🍔🥤🍟🍦 - Infra TERRAFORM falhou! A infraestrutura foi destruída. Por favor, verifique os logs para mais detalhes.🚫🚫"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ PEDIDO 🍔🥤🍟🍦 - Infra TERRAFORM foi concluída com sucesso!🌍⛏️🛠️"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  security:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Scan Infrastructure Code
        run: trivy config --exit-code 1 --severity HIGH,CRITICAL ./terraform

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ PEDIDO 🍔🥤🍟🍦 - pipeline de SEGURANÇA falhou! Por favor, verifique os logs para mais detalhes.🚫🚫"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ PEDIDO 🍔🥤🍟🍦 - pipeline de SEGURANÇA foi concluído com sucesso! 🔒🛡️🔍"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: security

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create Deployment
        id: create_deployment
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments \
            -d '{"ref":"${{ github.sha }}","environment":"staging","description":"Deploying to staging environment","transient_environment":true,"production_environment":false}')
          deployment_id=$(echo $response | jq -r '.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging
        run: echo "Deploying to staging environment"

      - name: Create Deployment Status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments/${{ env.deployment_id }}/statuses \
            -d '{"state":"success"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ PEDIDO 🍔🥤🍟🍦 staging-deploy falhou! A infraestrutura foi destruída. Por favor, verifique os logs para mais detalhes.🚫🚫"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ PEDIDO 🍔🥤🍟🍦 staging-deploy concluído com sucesso!🚀🔧"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create Deployment
        id: create_deployment_prod
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments \
            -d '{"ref":"${{ github.sha }}","environment":"production","description":"Deploying to production environment","transient_environment":false,"production_environment":true}')
          deployment_id=$(echo $response | jq -r '.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        run: echo "Deploying to production environment"

      - name: Create Deployment Status
        run: |
          curl --X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/deployments/${{ env.deployment_id }}/statuses \
            -d '{"state":"success"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Discord Failure Notification
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"⚠️ PEDIDO 🍔🥤🍟🍦 production-deploy falhou! A infraestrutura foi destruída. Por favor, verifique os logs para mais detalhes.🚫🚫"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Success Notification
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"✅ PEDIDO 🍔🥤🍟🍦 production-deploy concluído com sucesso!🚀🔧"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}